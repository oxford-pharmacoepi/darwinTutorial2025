[
  {
    "objectID": "CodelistGenerator/index.html#standarisation-of-the-data-format",
    "href": "CodelistGenerator/index.html#standarisation-of-the-data-format",
    "title": "CodelistGenerator",
    "section": "Standarisation of the data format",
    "text": "Standarisation of the data format\n\nThe OMOP Common Data Model"
  },
  {
    "objectID": "CodelistGenerator/index.html#create-a-reference-to-gibleed-dataset",
    "href": "CodelistGenerator/index.html#create-a-reference-to-gibleed-dataset",
    "title": "CodelistGenerator",
    "section": "Create a reference to GiBleed dataset",
    "text": "Create a reference to GiBleed dataset\n\nEunomia is a synthetic OMOP database with ~2,600 individuals. It is freely available and you can create a cdm reference like:\n\n\n\nlibrary(DBI)\nlibrary(dplyr)\nlibrary(duckdb)\nlibrary(omopgenerics)\nlibrary(CDMConnector)\nlibrary(here)\n\n\n\n\ndatasetName &lt;- \"GiBleed\"\nrequireEunomia(datasetName = datasetName)\ncon &lt;- dbConnect(duckdb(), dbdir = eunomiaDir(datasetName = datasetName))\n\nCreating CDM database /home/runner/work/darwinTutorial2025/darwinTutorial2025/mock_datasets//GiBleed_5.3.zip\n\ncdm &lt;- cdmFromCon(con = con, cdmSchema = \"main\", writeSchema = \"main\", cdmName = datasetName)\ncdm\n\n\n── # OMOP CDM reference (duckdb) of GiBleed ────────────────────────────────────────────────────────────────────────────\n• omop tables: person, observation_period, visit_occurrence, visit_detail, condition_occurrence, drug_exposure,\nprocedure_occurrence, device_exposure, measurement, observation, death, note, note_nlp, specimen, fact_relationship,\nlocation, care_site, provider, payer_plan_period, cost, drug_era, dose_era, condition_era, metadata, cdm_source,\nconcept, vocabulary, domain, concept_class, concept_relationship, relationship, concept_synonym, concept_ancestor,\nsource_to_concept_map, drug_strength\n• cohort tables: -\n• achilles tables: -\n• other tables: -"
  },
  {
    "objectID": "CodelistGenerator/index.html#creating-a-reference-to-the-omop-common-data-model",
    "href": "CodelistGenerator/index.html#creating-a-reference-to-the-omop-common-data-model",
    "title": "CodelistGenerator",
    "section": "Creating a reference to the OMOP common data model",
    "text": "Creating a reference to the OMOP common data model\nOnce we have created the our reference to the overall OMOP CDM, we can reference specific tables using the “$” operator or [[““]].\n\ncdm$observation_period |&gt; head(2)\n\n# Source:   SQL [?? x 5]\n# Database: DuckDB v1.3.1 [unknown@Linux 6.11.0-1015-azure:R 4.5.1//tmp/RtmpUU7iGW/file25286d688261.duckdb]\n  observation_period_id person_id observation_period_start_date observation_period_end_date period_type_concept_id\n                  &lt;int&gt;     &lt;int&gt; &lt;date&gt;                        &lt;date&gt;                                       &lt;int&gt;\n1                     6         6 1963-12-31                    2007-02-06                                44814724\n2                    13        13 2009-04-26                    2019-04-14                                44814724\n\n\n\n\n\ncdm[[\"observation_period\"]] |&gt; head(2)\n\n# Source:   SQL [?? x 5]\n# Database: DuckDB v1.3.1 [unknown@Linux 6.11.0-1015-azure:R 4.5.1//tmp/RtmpUU7iGW/file25286d688261.duckdb]\n  observation_period_id person_id observation_period_start_date observation_period_end_date period_type_concept_id\n                  &lt;int&gt;     &lt;int&gt; &lt;date&gt;                        &lt;date&gt;                                       &lt;int&gt;\n1                     6         6 1963-12-31                    2007-02-06                                44814724\n2                    13        13 2009-04-26                    2019-04-14                                44814724"
  },
  {
    "objectID": "CodelistGenerator/index.html#behind-the-scenes",
    "href": "CodelistGenerator/index.html#behind-the-scenes",
    "title": "CodelistGenerator",
    "section": "Behind the scenes",
    "text": "Behind the scenes\nThe omopgenerics package defines core classes and methods used by CDMConnector and analytic packages.\n\nHaving omopgenerics as a central dependency reduces code duplication and ensures consistency across packages (eg function inputs, error messages, and results objects).\n\n\n\nomopgenerics::validateCdmArgument(cdm = cdm, \n                                  checkOverlapObservation = TRUE, \n                                  checkStartBeforeEndObservation = TRUE, \n                                  checkPlausibleObservationDates = TRUE)"
  },
  {
    "objectID": "CodelistGenerator/index.html#cdm_reference-object",
    "href": "CodelistGenerator/index.html#cdm_reference-object",
    "title": "CodelistGenerator",
    "section": "\n<cdm_reference> object",
    "text": "&lt;cdm_reference&gt; object\n\nclass(cdm)\n\n[1] \"cdm_reference\"\n\n\n\n\ncdmName(cdm)\n\n[1] \"GiBleed\"\n\n\n\n\n\ncdmVersion(cdm)\n\n[1] \"5.3\"\n\n\n\n\n\ncdmSource(cdm)\n\nThis is a duckdb cdm source"
  },
  {
    "objectID": "CodelistGenerator/index.html#cdm_table-object",
    "href": "CodelistGenerator/index.html#cdm_table-object",
    "title": "CodelistGenerator",
    "section": "\n<cdm_table> object",
    "text": "&lt;cdm_table&gt; object\n\n\ncdm$person\n\n# Source:   table&lt;person&gt; [?? x 18]\n# Database: DuckDB v1.3.1 [unknown@Linux 6.11.0-1015-azure:R 4.5.1//tmp/RtmpUU7iGW/file25286d688261.duckdb]\n   person_id gender_concept_id year_of_birth month_of_birth day_of_birth birth_datetime      race_concept_id\n       &lt;int&gt;             &lt;int&gt;         &lt;int&gt;          &lt;int&gt;        &lt;int&gt; &lt;dttm&gt;                        &lt;int&gt;\n 1         6              8532          1963             12           31 1963-12-31 00:00:00            8516\n 2       123              8507          1950              4           12 1950-04-12 00:00:00            8527\n 3       129              8507          1974             10            7 1974-10-07 00:00:00            8527\n 4        16              8532          1971             10           13 1971-10-13 00:00:00            8527\n 5        65              8532          1967              3           31 1967-03-31 00:00:00            8516\n 6        74              8532          1972              1            5 1972-01-05 00:00:00            8527\n 7        42              8532          1909             11            2 1909-11-02 00:00:00            8527\n 8       187              8507          1945              7           23 1945-07-23 00:00:00            8527\n 9        18              8532          1965             11           17 1965-11-17 00:00:00            8527\n10       111              8532          1975              5            2 1975-05-02 00:00:00            8527\n# ℹ more rows\n# ℹ 11 more variables: ethnicity_concept_id &lt;int&gt;, location_id &lt;int&gt;, provider_id &lt;int&gt;, care_site_id &lt;int&gt;,\n#   person_source_value &lt;chr&gt;, gender_source_value &lt;chr&gt;, gender_source_concept_id &lt;int&gt;, race_source_value &lt;chr&gt;,\n#   race_source_concept_id &lt;int&gt;, ethnicity_source_value &lt;chr&gt;, ethnicity_source_concept_id &lt;int&gt;\n\n\n\n\n\nclass(cdm$person)\n\n[1] \"omop_table\"            \"cdm_table\"             \"tbl_duckdb_connection\" \"tbl_dbi\"              \n[5] \"tbl_sql\"               \"tbl_lazy\"              \"tbl\""
  },
  {
    "objectID": "CodelistGenerator/index.html#cdm_table-object-1",
    "href": "CodelistGenerator/index.html#cdm_table-object-1",
    "title": "CodelistGenerator",
    "section": "\n<cdm_table> object",
    "text": "&lt;cdm_table&gt; object\n\n\ncdmReference(cdm$person)\n\n\n\n\n── # OMOP CDM reference (duckdb) of GiBleed ────────────────────────────────────────────────────────────────────────────\n\n\n• omop tables: person, observation_period, visit_occurrence, visit_detail, condition_occurrence, drug_exposure,\nprocedure_occurrence, device_exposure, measurement, observation, death, note, note_nlp, specimen, fact_relationship,\nlocation, care_site, provider, payer_plan_period, cost, drug_era, dose_era, condition_era, metadata, cdm_source,\nconcept, vocabulary, domain, concept_class, concept_relationship, relationship, concept_synonym, concept_ancestor,\nsource_to_concept_map, drug_strength\n\n\n• cohort tables: -\n\n\n• achilles tables: -\n\n\n• other tables: -\n\n\n\n\n\ntableName(cdm$person)\n\n[1] \"person\"\n\n\n\n\n\ntableSource(cdm$person)\n\nThis is a duckdb cdm source"
  },
  {
    "objectID": "CodelistGenerator/index.html#cdm_table-object-2",
    "href": "CodelistGenerator/index.html#cdm_table-object-2",
    "title": "CodelistGenerator",
    "section": "\n<cdm_table> object",
    "text": "&lt;cdm_table&gt; object\n\ncdmName(cdm$person)\n\n[1] \"GiBleed\"\n\n\n\n\ncdmVersion(cdm$person)\n\n[1] \"5.3\"\n\n\n\n\n\ncdmSource(cdm$person)\n\nThis is a duckdb cdm source"
  },
  {
    "objectID": "CodelistGenerator/index.html#working-with-the-cdm-reference",
    "href": "CodelistGenerator/index.html#working-with-the-cdm-reference",
    "title": "CodelistGenerator",
    "section": "Working with the cdm reference",
    "text": "Working with the cdm reference\nWe can use common dplyr operations to interact with the data in our cdm reference\n\ncdm$condition_occurrence |&gt; \n  count()\n\n# Source:   SQL [?? x 1]\n# Database: DuckDB v1.3.1 [unknown@Linux 6.11.0-1015-azure:R 4.5.1//tmp/RtmpUU7iGW/file25286d688261.duckdb]\n      n\n  &lt;dbl&gt;\n1 65332\n\n\n\n\n\ncdm$condition_occurrence |&gt; \n  summarise(\n    min_condition_start = min(condition_start_date, na.rm = TRUE),\n    median_condition_start = median(condition_start_date, na.rm = TRUE),\n    max_condition_start = max(condition_start_date, na.rm = TRUE))\n\n# Source:   SQL [?? x 3]\n# Database: DuckDB v1.3.1 [unknown@Linux 6.11.0-1015-azure:R 4.5.1//tmp/RtmpUU7iGW/file25286d688261.duckdb]\n  min_condition_start median_condition_start max_condition_start\n  &lt;date&gt;              &lt;dttm&gt;                 &lt;date&gt;             \n1 1908-10-30          1986-12-09 00:00:00    2019-06-29"
  },
  {
    "objectID": "CodelistGenerator/index.html#dplyr-r-code-to-sql",
    "href": "CodelistGenerator/index.html#dplyr-r-code-to-sql",
    "title": "CodelistGenerator",
    "section": "Dplyr R code to SQL",
    "text": "Dplyr R code to SQL\nBehind the scenes our dplyr query is being translated into SQL.\n\ncdm$condition_occurrence |&gt; \n  count() |&gt; \n  show_query()\n\n&lt;SQL&gt;\nSELECT COUNT(*) AS n\nFROM condition_occurrence\n\n\n\n\ncdm$condition_occurrence |&gt; \n  summarise(\n    min_condition_start = min(condition_start_date, na.rm = TRUE),\n    median_condition_start = median(condition_start_date, na.rm = TRUE),\n    max_condition_start = max(condition_start_date, na.rm = TRUE)) |&gt; \n  show_query()\n\n&lt;SQL&gt;\nSELECT\n  MIN(condition_start_date) AS min_condition_start,\n  MEDIAN(condition_start_date) AS median_condition_start,\n  MAX(condition_start_date) AS max_condition_start\nFROM condition_occurrence"
  },
  {
    "objectID": "CodelistGenerator/index.html#your-turn",
    "href": "CodelistGenerator/index.html#your-turn",
    "title": "CodelistGenerator",
    "section": "Your turn",
    "text": "Your turn\nUsing a cdm reference you have connected to:\n\nHow many people are in the person table?\nWhat is the minimum observation period start date?\nWhat is the maximum observation period end date?"
  },
  {
    "objectID": "CodelistGenerator/index.html#reference-to-the-cdm-vocabulary-tables-1",
    "href": "CodelistGenerator/index.html#reference-to-the-cdm-vocabulary-tables-1",
    "title": "CodelistGenerator",
    "section": "Reference to the CDM vocabulary tables",
    "text": "Reference to the CDM vocabulary tables"
  },
  {
    "objectID": "CodelistGenerator/index.html#connect-to-eunomia",
    "href": "CodelistGenerator/index.html#connect-to-eunomia",
    "title": "CodelistGenerator",
    "section": "Connect to eunomia",
    "text": "Connect to eunomia\n\nlibrary(DBI)\nlibrary(dplyr)\nlibrary(duckdb)\nlibrary(omopgenerics)\nlibrary(CDMConnector)\nlibrary(here)\nlibrary(CodelistGenerator)\ndatasetName &lt;- \"GiBleed\"\nrequireEunomia(datasetName = datasetName)\ncon &lt;- dbConnect(duckdb(), dbdir = eunomiaDir(datasetName = datasetName))\ncdm &lt;- cdmFromCon(con = con, cdmSchema = \"main\", writeSchema = \"main\", cdmName = datasetName)\ncdm\n\n\n\n\n── # OMOP CDM reference (duckdb) of GiBleed ────────────────────────────────────────────────────────────────────────────\n\n\n• omop tables: person, observation_period, visit_occurrence, visit_detail, condition_occurrence, drug_exposure,\nprocedure_occurrence, device_exposure, measurement, observation, death, note, note_nlp, specimen, fact_relationship,\nlocation, care_site, provider, payer_plan_period, cost, drug_era, dose_era, condition_era, metadata, cdm_source,\nconcept, vocabulary, domain, concept_class, concept_relationship, relationship, concept_synonym, concept_ancestor,\nsource_to_concept_map, drug_strength\n\n\n• cohort tables: -\n\n\n• achilles tables: -\n\n\n• other tables: -"
  },
  {
    "objectID": "CodelistGenerator/index.html#reference-to-the-cdm-vocabulary-tables-2",
    "href": "CodelistGenerator/index.html#reference-to-the-cdm-vocabulary-tables-2",
    "title": "CodelistGenerator",
    "section": "Reference to the CDM vocabulary tables",
    "text": "Reference to the CDM vocabulary tables\nNote, Eunomia doesn´t have a full set of vocabularies:\n\ncdm$concept |&gt;\n  tally() |&gt;\n  pull()\n\n[1] 444"
  },
  {
    "objectID": "CodelistGenerator/index.html#cdm-vocabulary-tables-1",
    "href": "CodelistGenerator/index.html#cdm-vocabulary-tables-1",
    "title": "CodelistGenerator",
    "section": "CDM vocabulary tables",
    "text": "CDM vocabulary tables\nhttps://athena.ohdsi.org"
  },
  {
    "objectID": "CodelistGenerator/index.html#cdm-vocabulary-tables-2",
    "href": "CodelistGenerator/index.html#cdm-vocabulary-tables-2",
    "title": "CodelistGenerator",
    "section": "CDM vocabulary tables",
    "text": "CDM vocabulary tables\n\ncdm$concept |&gt; glimpse()\n\nRows: ??\nColumns: 10\nDatabase: DuckDB v1.3.1 [unknown@Linux 6.11.0-1015-azure:R 4.5.1//tmp/RtmpUU7iGW/file25281401b58d.duckdb]\n$ concept_id       &lt;int&gt; 35208414, 1118088, 40213201, 1557272, 4336464, 4295880, 3020630, 19129655, 44923712, 1569708,…\n$ concept_name     &lt;chr&gt; \"Gastrointestinal hemorrhage, unspecified\", \"celecoxib 200 MG Oral Capsule [Celebrex]\", \"pneu…\n$ domain_id        &lt;chr&gt; \"Condition\", \"Drug\", \"Drug\", \"Drug\", \"Procedure\", \"Procedure\", \"Measurement\", \"Drug\", \"Drug\",…\n$ vocabulary_id    &lt;chr&gt; \"ICD10CM\", \"RxNorm\", \"CVX\", \"RxNorm\", \"SNOMED\", \"SNOMED\", \"LOINC\", \"RxNorm\", \"NDC\", \"ICD10CM\"…\n$ concept_class_id &lt;chr&gt; \"4-char billing code\", \"Branded Drug\", \"CVX\", \"Ingredient\", \"Procedure\", \"Procedure\", \"Lab Te…\n$ standard_concept &lt;chr&gt; NA, \"S\", \"S\", \"S\", \"S\", \"S\", \"S\", \"S\", NA, NA, \"S\", \"S\", \"S\", \"S\", \"S\", \"S\", NA, \"S\", \"S\", \"S…\n$ concept_code     &lt;chr&gt; \"K92.2\", \"213469\", \"33\", \"46041\", \"232717009\", \"76601001\", \"2885-2\", \"789980\", \"00025152531\",…\n$ valid_start_date &lt;date&gt; 2007-01-01, 1970-01-01, 2008-12-01, 1970-01-01, 1970-01-01, 1970-01-01, 1970-01-01, 2008-03-…\n$ valid_end_date   &lt;date&gt; 2099-12-31, 2099-12-31, 2099-12-31, 2099-12-31, 2099-12-31, 2099-12-31, 2099-12-31, 2099-12-…\n$ invalid_reason   &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…"
  },
  {
    "objectID": "CodelistGenerator/index.html#cdm-vocabulary-tables-3",
    "href": "CodelistGenerator/index.html#cdm-vocabulary-tables-3",
    "title": "CodelistGenerator",
    "section": "CDM vocabulary tables",
    "text": "CDM vocabulary tables\n\ncdm$condition_occurrence |&gt;\n  group_by(condition_concept_id) |&gt;\n  tally() |&gt;\n  left_join(\n    cdm$concept |&gt;\n      select(\"concept_id\", \"concept_name\"),\n    by = c(\"condition_concept_id\" = \"concept_id\")\n  ) |&gt;\n  collect() |&gt;\n  arrange(desc(n))\n\n# A tibble: 80 × 3\n   condition_concept_id     n concept_name                            \n                  &lt;int&gt; &lt;dbl&gt; &lt;chr&gt;                                   \n 1             40481087 17268 Viral sinusitis                         \n 2              4112343 10217 Acute viral pharyngitis                 \n 3               260139  8184 Acute bronchitis                        \n 4               372328  3605 Otitis media                            \n 5                80180  2694 Osteoarthritis                          \n 6                28060  2656 Streptococcal sore throat               \n 7                81151  1915 Sprain of ankle                         \n 8               378001  1013 Concussion with no loss of consciousness\n 9              4283893  1001 Sinusitis                               \n10              4294548   939 Acute bacterial sinusitis               \n# ℹ 70 more rows"
  },
  {
    "objectID": "CodelistGenerator/index.html#cdm-vocabulary-tables-4",
    "href": "CodelistGenerator/index.html#cdm-vocabulary-tables-4",
    "title": "CodelistGenerator",
    "section": "CDM vocabulary tables",
    "text": "CDM vocabulary tables\n\ncdm$concept_ancestor |&gt; glimpse()\n\nRows: ??\nColumns: 4\nDatabase: DuckDB v1.3.1 [unknown@Linux 6.11.0-1015-azure:R 4.5.1//tmp/RtmpUU7iGW/file25281401b58d.duckdb]\n$ ancestor_concept_id      &lt;int&gt; 4180628, 4179141, 21500574, 21505770, 21503967, 36203060, 36151386, 21502552, 4076562…\n$ descendant_concept_id    &lt;int&gt; 313217, 4146173, 1118084, 1119510, 40162522, 40479422, 1119510, 1112807, 40769189, 19…\n$ min_levels_of_separation &lt;int&gt; 5, 2, 4, 0, 5, 4, 0, 4, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 2, 0, 0, 2, 0, 0, 0…\n$ max_levels_of_separation &lt;int&gt; 6, 2, 4, 0, 6, 4, 0, 4, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 3, 0, 0, 3, 0, 0, 0…"
  },
  {
    "objectID": "CodelistGenerator/index.html#cdm-vocabulary-tables-5",
    "href": "CodelistGenerator/index.html#cdm-vocabulary-tables-5",
    "title": "CodelistGenerator",
    "section": "CDM vocabulary tables",
    "text": "CDM vocabulary tables\n\ncdm$concept_relationship |&gt; glimpse()\n\nRows: ??\nColumns: 6\nDatabase: DuckDB v1.3.1 [unknown@Linux 6.11.0-1015-azure:R 4.5.1//tmp/RtmpUU7iGW/file25281401b58d.duckdb]\n$ concept_id_1     &lt;int&gt; 192671, 1118088, 1569708, 35208414, 35208414, 40162359, 44923712, 45011828\n$ concept_id_2     &lt;int&gt; 35208414, 44923712, 35208414, 192671, 1569708, 45011828, 1118088, 40162359\n$ relationship_id  &lt;chr&gt; \"Mapped from\", \"Mapped from\", \"Subsumes\", \"Maps to\", \"Is a\", \"Mapped from\", \"Maps to\", \"Maps …\n$ valid_start_date &lt;date&gt; 1970-01-01, 1970-01-01, 2016-03-25, 1970-01-01, 2016-03-25, 2009-08-03, 1970-01-01, 2009-08-0…\n$ valid_end_date   &lt;date&gt; 2099-12-31, 2099-12-31, 2099-12-31, 2099-12-31, 2099-12-31, 2099-12-31, 2099-12-31, 2099-12-3…\n$ invalid_reason   &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA"
  },
  {
    "objectID": "CodelistGenerator/index.html#cdm-vocabulary-tables-6",
    "href": "CodelistGenerator/index.html#cdm-vocabulary-tables-6",
    "title": "CodelistGenerator",
    "section": "CDM vocabulary tables",
    "text": "CDM vocabulary tables\n\ncdm$concept_synonym |&gt; glimpse()\n\nRows: ??\nColumns: 3\nDatabase: DuckDB v1.3.1 [unknown@Linux 6.11.0-1015-azure:R 4.5.1//tmp/RtmpUU7iGW/file25281401b58d.duckdb]\n$ concept_id           &lt;int&gt; 964261, 1322184, 441267, 1718412, 4336464, 4102123, 4237458, 4280726, 4330583, 3014576, 4…\n$ concept_synonym_name &lt;chr&gt; \"cyanocobalamin 5000 MCG/ML Injectable Solution\", \"clopidogrel\", \"Cystic fibrosis (disord…\n$ language_concept_id  &lt;int&gt; 4180186, 4180186, 4180186, 4180186, 4180186, 4180186, 4180186, 4180186, 4180186, 4180186,…"
  },
  {
    "objectID": "CodelistGenerator/index.html#vocabulary-version",
    "href": "CodelistGenerator/index.html#vocabulary-version",
    "title": "CodelistGenerator",
    "section": "Vocabulary version",
    "text": "Vocabulary version\nSearch results will be specific to the version of the vocabulary being used\n\ngetVocabVersion(cdm = cdm)\n\n[1] \"v5.0 18-JAN-19\""
  },
  {
    "objectID": "CodelistGenerator/index.html#available-vocabularies",
    "href": "CodelistGenerator/index.html#available-vocabularies",
    "title": "CodelistGenerator",
    "section": "Available vocabularies",
    "text": "Available vocabularies\nWhat vocabularies are available?\n\ngetVocabularies(cdm = cdm)\n\n[1] \"CVX\"     \"Gender\"  \"ICD10CM\" \"LOINC\"   \"NDC\"     \"None\"    \"RxNorm\"  \"SNOMED\"  \"Visit\""
  },
  {
    "objectID": "CodelistGenerator/index.html#available-domains",
    "href": "CodelistGenerator/index.html#available-domains",
    "title": "CodelistGenerator",
    "section": "Available domains",
    "text": "Available domains\nWhat domains are present?\n\ngetDomains(cdm = cdm)\n\n[1] \"Drug\"        \"Procedure\"   \"Condition\"   \"Measurement\" \"Observation\" \"Visit\"       \"Gender\""
  },
  {
    "objectID": "CodelistGenerator/index.html#concept-classes",
    "href": "CodelistGenerator/index.html#concept-classes",
    "title": "CodelistGenerator",
    "section": "Concept classes",
    "text": "Concept classes\nWhat concept classes are present?\n\ngetConceptClassId(\n  cdm = cdm,\n  standardConcept = \"Standard\",\n  domain = \"Drug\"\n)\n\n[1] \"Branded Drug\"        \"Branded Drug Comp\"   \"Branded Pack\"        \"Clinical Drug\"       \"Clinical Drug Comp\" \n[6] \"CVX\"                 \"Ingredient\"          \"Quant Branded Drug\"  \"Quant Clinical Drug\"\n\n\n\n\ngetConceptClassId(\n  cdm = cdm,\n  standardConcept = \"Standard\",\n  domain = \"Condition\"\n)\n\n[1] \"Clinical Finding\""
  },
  {
    "objectID": "CodelistGenerator/index.html#your-turn-1",
    "href": "CodelistGenerator/index.html#your-turn-1",
    "title": "CodelistGenerator",
    "section": "Your turn",
    "text": "Your turn\nUsing a cdm reference you have connected to:\n\nWhat is the vocabulary version of the cdm?\nHow many concepts are in your concept table?\nWhat domains are available? Which domains would you use if you were defining a cohort of people with asthma?"
  },
  {
    "objectID": "CodelistGenerator/index.html#solution",
    "href": "CodelistGenerator/index.html#solution",
    "title": "CodelistGenerator",
    "section": "Solution",
    "text": "Solution\n\n💡 Click to see solution\n\ngetVocabVersion(cdm = cdm)\n\ncdm$concept |&gt;\n  tally()\n\ngetDomains(cdm = cdm)"
  },
  {
    "objectID": "CodelistGenerator/index.html#vocabulary-based-codelists-using-codelistgenerator-1",
    "href": "CodelistGenerator/index.html#vocabulary-based-codelists-using-codelistgenerator-1",
    "title": "CodelistGenerator",
    "section": "Vocabulary-based codelists using CodelistGenerator",
    "text": "Vocabulary-based codelists using CodelistGenerator\nWe can use drug hierarchies and relationships to create vocabulary-based codelists."
  },
  {
    "objectID": "CodelistGenerator/index.html#drug-ingredients",
    "href": "CodelistGenerator/index.html#drug-ingredients",
    "title": "CodelistGenerator",
    "section": "Drug ingredients",
    "text": "Drug ingredients\n\ningredients &lt;- getDrugIngredientCodes(cdm = cdm, nameStyle = \"{concept_name}\")\ningredients\n\n\n- acetaminophen (7 codes)\n- albuterol (2 codes)\n- alendronate (2 codes)\n- alfentanil (1 codes)\n- alteplase (2 codes)\n- amiodarone (2 codes)\nalong with 85 more codelists\n\n\n\n\ningredients$warfarin\n\n[1]  1310149 40163554\n\n\n\n\n\ncdm$concept |&gt;\n  filter(concept_id %in% c(1310149, 40163554))\n\n# Source:   SQL [?? x 10]\n# Database: DuckDB v1.3.1 [unknown@Linux 6.11.0-1015-azure:R 4.5.1//tmp/RtmpUU7iGW/file25281401b58d.duckdb]\n  concept_id concept_name        domain_id vocabulary_id concept_class_id standard_concept concept_code valid_start_date\n       &lt;int&gt; &lt;chr&gt;               &lt;chr&gt;     &lt;chr&gt;         &lt;chr&gt;            &lt;chr&gt;            &lt;chr&gt;        &lt;date&gt;          \n1    1310149 Warfarin            Drug      RxNorm        Ingredient       S                11289        1970-01-01      \n2   40163554 Warfarin Sodium 5 … Drug      RxNorm        Clinical Drug    S                855332       2009-08-02      \n# ℹ 2 more variables: valid_end_date &lt;date&gt;, invalid_reason &lt;chr&gt;"
  },
  {
    "objectID": "CodelistGenerator/index.html#your-turn-2",
    "href": "CodelistGenerator/index.html#your-turn-2",
    "title": "CodelistGenerator",
    "section": "Your turn",
    "text": "Your turn\nUsing Eunomia data:\n\nGet codes for memantine using getDrugIngredientCodes. How many codes do you include?\n\nHow how many records for memantine are in the drug exposure table (hint: filter on the drug_concept_id field from the drug_exposure table)?\n\n0\n67\n110\n245"
  },
  {
    "objectID": "CodelistGenerator/index.html#solution-1",
    "href": "CodelistGenerator/index.html#solution-1",
    "title": "CodelistGenerator",
    "section": "Solution",
    "text": "Solution\n\n💡 Click to see solution\n\nmemantine_codes &lt;- getDrugIngredientCodes(cdm = cdm, name = \"memantine\")\nmemantine_codes\n\ncdm$drug_exposure |&gt;\n  filter(drug_concept_id %in% !!memantine_codes[[1]]) |&gt;\n  tally()"
  },
  {
    "objectID": "CodelistGenerator/index.html#systematic-search-using-codelistgenerator-1",
    "href": "CodelistGenerator/index.html#systematic-search-using-codelistgenerator-1",
    "title": "CodelistGenerator",
    "section": "Systematic search using CodelistGenerator",
    "text": "Systematic search using CodelistGenerator\n\nCodelistGenerator is used to create a candidate set of codes for helping to define patient cohorts in data mapped to the OMOP common data model.\n\n\nA little like the process for a systematic review, the idea is that for a specified search strategy, CodelistGenerator will identify a set of concepts that may be relevant, with these then being screened to remove any irrelevant codes."
  },
  {
    "objectID": "CodelistGenerator/index.html#codes-for-asthma",
    "href": "CodelistGenerator/index.html#codes-for-asthma",
    "title": "CodelistGenerator",
    "section": "Codes for asthma",
    "text": "Codes for asthma\n\nasthma_codes &lt;- getCandidateCodes(\n  cdm = cdm,\n  keywords = \"asthma\",\n  domains = \"Condition\"\n)\nasthma_codes |&gt; glimpse()\n\nRows: 2\nColumns: 6\n$ concept_id       &lt;int&gt; 4051466, 317009\n$ found_from       &lt;chr&gt; \"From initial search\", \"From initial search\"\n$ concept_name     &lt;chr&gt; \"Childhood asthma\", \"Asthma\"\n$ domain_id        &lt;chr&gt; \"Condition\", \"Condition\"\n$ vocabulary_id    &lt;chr&gt; \"SNOMED\", \"SNOMED\"\n$ standard_concept &lt;chr&gt; \"S\", \"S\"\n\n\n\n\n\nasthma_cs &lt;- newCodelist(list(\"asthma\" = asthma_codes$concept_id))\nasthma_cs\n\n\n- asthma (2 codes)"
  },
  {
    "objectID": "CodelistGenerator/index.html#your-turn-3",
    "href": "CodelistGenerator/index.html#your-turn-3",
    "title": "CodelistGenerator",
    "section": "Your turn",
    "text": "Your turn\nUsing Eunomia data:\n\nSearch for codes for sinusitis recorded in the condition domain\nDo you identify any more codes if you also search in the observation domain as well as the condition domain"
  },
  {
    "objectID": "CodelistGenerator/index.html#solution-2",
    "href": "CodelistGenerator/index.html#solution-2",
    "title": "CodelistGenerator",
    "section": "Solution",
    "text": "Solution\n\n💡 Click to see solution\n\nsinusitis_codes &lt;- getCandidateCodes(\n  cdm = cdm,\n  keywords = \"sinusitis\",\n  domains = \"Condition\"\n)\nnrow(sinusitis_codes)\n\nsinusitis_codes_2 &lt;- getCandidateCodes(\n  cdm = cdm,\n  keywords = \"sinusitis\",\n  domains = c(\"Condition\", \"Observation\")\n)\nnrow(sinusitis_codes_2)"
  }
]