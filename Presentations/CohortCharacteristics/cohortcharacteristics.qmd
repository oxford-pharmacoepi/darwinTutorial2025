---
title: "CohortCharacteristics"
subtitle: "Characterise cohorts"
format:
  revealjs: 
    theme: [simple, styleOU.scss]
    incremental: true   
    slide-number: true
    chalkboard: true
    preview-links: auto
    margin: 0.07
    code-link: true
    code-line-numbers: false
    height: 900
    width: 1600
    footer: "Conducting 'Off-The-Shelf' Characterization Studies Using DARWIN EU Tools and the OMOP CDM"
execute:
  echo: true
  eval: true
  output-width: 100%
editor: visual
---

## CohortCharacteristics

![](https://github.com/darwin-eu-dev/CohortCharacteristics/blob/main/man/figures/logo.png?raw=true){fig-align="center"}

## Context

```{r, echo = FALSE}
options(width = 120)
```

. . .

This package aims to standardise and provide the tools to conduct Characterisation studies as of the Darwin-EU Catalogue of Standard Analytics.

![](https://www.benzifoundation.org/wp-content/uploads/2023/09/eu-darwin-1.png){fig-align="center"}

## Package overview

-   [v0.3.0 on cran](https://CRAN.R-project.org/package=CohortCharacteristics)

-   [package website](https://darwin-eu-dev.github.io/CohortCharacteristics/)

. . .

![](https://github.com/darwin-eu-dev/CohortCharacteristics/blob/main/man/figures/logo.png?raw=true){fig-align="center" width="5.5in"}

## Functions

-   [summariseCohortCount](https://darwin-eu-dev.github.io/PatientProfiles/reference/summariseCohortCount.html)

-   [**summariseCohortAttrition**](https://darwin-eu-dev.github.io/PatientProfiles/reference/summariseCohortAttrition.html)

-   [**summariseCharacteristics**](https://darwin-eu-dev.github.io/PatientProfiles/reference/summariseCharacteristics.html)

-   [summariseLargeScaleCharacteristics](https://darwin-eu-dev.github.io/PatientProfiles/reference/summariseLargeScaleCharacteristics.html)

-   [summariseCohortOverlap](https://darwin-eu-dev.github.io/PatientProfiles/reference/summariseCohortOverlap.html)

-   [summariseCohortTiming](https://darwin-eu-dev.github.io/PatientProfiles/reference/summariseCohortTiming.html)

## Workflow

We have three types of functions:

-   **summarise**: these functions produce an standardised output to summarise a cohort. This standard output is called summarised_result.

-   **plot**: these functions produce plots (currently, only ggplot, but working to implement plotly) from a summarised_result object.

-   **table**: these functions produce tables (gt and flextable) from a summarised_result object.

. . .

```{r, eval = FALSE}
result <- summariseXXX(...)
```

. . .

```{r, eval = FALSE}
tableXXX(result)
```

. . .

```{r, eval = FALSE}
plotXXX(result)
```

. . .

```{mermaid}
%%| echo: false
flowchart LR
  A[summarise function ] --> B[Plot function ]
  A --> C[Table function ]
```

## Create the cdm reference

```{r}
library(duckdb)
library(CDMConnector)
library(dplyr)
library(here)

requireEunomia()
db <- dbConnect(duckdb(), dbdir = eunomiaDir())
cdm <- cdmFromCon(con = db, cdmSchema = "public", writeSchema = "results")
```

## summariseCohortAttrition

Let's use our prior drug cohorts:

```{r}
library(CodelistGenerator)
library(DrugUtilisation)
codelist <- getDrugIngredientCodes(cdm = cdm, name = "acetaminophen", nameStyle = "{concept_name}")
cdm <- generateDrugUtilisationCohortSet(
  cdm = cdm,
  name = "dus_cohort",
  conceptSet = codelist,
  gapEra = 30
)
cdm$dus_cohort <- cdm$dus_cohort |>
  requirePriorDrugWashout(days = 180) |>
  requireObservationBeforeDrug(days = 180) |>
  requireDrugInDateRange(dateRange = as.Date(c("2000-01-01", "2022-12-31")))
```

## summariseCohortAttrition

. . .

`summariseCohortAttrition` extracts the data from `attrition(cdm$dus_cohort)` in a standard format:

. . .

```{r}
library(CohortCharacteristics)
result <- summariseCohortAttrition(cdm$dus_cohort)
result |>
  glimpse()
```

. . .

```{r}
settings(result) |>
  glimpse()
```

## brief mention of summaried_result

<summarised_result> object consist on the main table that we have seen + a table of settings.

-   **bind** Join multiple results objects.

-   **settings** Read the settings of the result object.

-   **suppress** Suppress the results to counts less than a certain number.

-   **exportSummarisedResult** Export the result object to a csv file.

-   **importSummarisedResult** Import a result object from a csv file.

## tableCohortAttrition

. . .

::: scrollable-content
```{r}
tableCohortAttrition(result)
```
:::

## Export the gt table

[gt](https://gt.rstudio.com/) tables can easily be exported:

```{r, eval=FALSE}
tab <- tableCohortAttrition(result)
gt::gtsave(tab, "myTable.docx/html/pdf/png")
```

## flextable is also supported

```{r}
tableCohortAttrition(result, type = "flextable")
```

## plotCohortAttrition

. . .

```{r, eval=FALSE}
plotCohortAttrition(result)
```

. . .

```{r, echo=FALSE, results='asis'}
plotCohortAttrition(result)
```

## Export the attrition plot

The output is a [DiagrammeR](https://rich-iannone.github.io/DiagrammeR/) object:

```{r, eval=FALSE}
plt <- plotCohortAttrition(result)
# DiagrammeRsvg::export_svg(plt)
```

## Your turn

Can you visualise the attrition of the simvastatin cohort that we created before?

. . .

Can you suppress counts under 10?

## Result

```{r, echo=FALSE, results='asis'}
codelist <- getDrugIngredientCodes(cdm = cdm, name = "simvastatin")
cdm <- generateDrugUtilisationCohortSet(
  cdm = cdm,
  name = "simvastatin_cohort",
  conceptSet = codelist,
  gapEra = 90
)
cdm$simvastatin_cohort <- cdm$simvastatin_cohort |>
  requireIsFirstDrugEntry() |>
  requireObservationBeforeDrug(days = 365) |>
  requireDrugInDateRange(dateRange = as.Date(c('2010-01-01', '2021-12-31')))

result <- cdm$simvastatin_cohort |>
  summariseCohortAttrition() |>
  suppress(minCellCount = 10)

plotCohortAttrition(result)
```

## SummariseCharacteristics

[**summariseCharacteristics()**](https://darwin-eu-dev.github.io/CohortCharacteristics/reference/summariseCharacteristics.html) summarises the demographics of the cohort by default, but you can use the intersect arguments to evaluate:

-   Number of visits
-   Presence of medicines or conditions
-   ...

. . .

You need to instantiate the medications and/or conditions of interest in a cohort table.

## Let's instantiate some cohorts

```{r}
library(CodelistGenerator)
codelist <- getDrugIngredientCodes(
  cdm = cdm, 
  name = c("warfarin", "morphine", "verapamil", "atorvastatin", "nitroglycerin"), 
  nameStyle = "{concept_name}"
)
cdm <- generateDrugUtilisationCohortSet(
  cdm = cdm,
  name = "medications",
  conceptSet = codelist
)
cdm <- generateConceptCohortSet(
  cdm = cdm, 
  conceptSet =list(
    "fever" = c(437663),
    "cough" = c(254761),
    "cardiac_arrest" = c(321042),
    "myocardial_infarction" = c(4329847),
    "headache" = c(378253)
  ),
  name = "conditions",
  end = 0,
  limit = "all"
)
```

## summariseCharacteristics

```{r}
result <- cdm$dus_cohort |>
  PatientProfiles::addSex() |>
  summariseCharacteristics(
    strata = list("sex"),
    demographics = TRUE,
    ageGroup = list(c(0, 19), c(20, 39), c(40, 59), c(60, 79), c(80, Inf)),
    tableIntersectCount = list(
      "Number visits prior year" = list(tableName = "visit_occurrence", window = c(-365, -1))
    ),
    cohortIntersectFlag = list(
      "Conditions any time prior" = list(targetCohortTable = "conditions", window = c(-Inf, -1)),
      "Medications prior year" = list(targetCohortTable = "medications", window = c(-365, -1))
    )
  )
result |>
  glimpse()
```

## tableCharacteristics

```{r, eval=FALSE}
tableCharacteristics(result)
```

::: scrollable-content
```{r, echo=FALSE}
tableCharacteristics(result)
```
:::

## tableCharacteristics

```{r, eval=FALSE}
tableCharacteristics(
  result,
  header = c("cdm_name", "sex"),
  groupColumn = c("cohort_name"),
  hide = c("table", "window", "value")
)
```

::: scrollable-content
```{r, echo=FALSE}
tableCharacteristics(
  result,
  header = c("cdm_name", "sex"),
  groupColumn = c("cohort_name"),
  hide = c("table", "window", "value")
)
```
:::

## tableCharacteristics

```{r, eval=FALSE}
result |>
  dplyr::filter(!estimate_name %in% c("min", "max", "mean", "sd")) |>
  tableCharacteristics(
    header = c("cdm_name", "sex"),
    groupColumn = c("cohort_name"),
    hide = c("table", "window", "value")
  )
```

::: scrollable-content
```{r, echo=FALSE}
result |>
  dplyr::filter(!estimate_name %in% c("min", "max", "mean", "sd")) |>
  tableCharacteristics(
    header = c("cdm_name", "sex"),
    groupColumn = c("cohort_name"),
    hide = c("table", "window", "value")
  )
```
:::

## Your turn

Characterise the 'simvastatin' cohort with:

-   Demographics
-   Two age groups: 0-49; \>=50
-   Number of records in condition_occurrence on the index date.
-   Using same drugs than for acetaminophen which ones where used in the prior year *including index date*
-   Using same conditions than for acetaminophen which ones where used any time prior *including index date*

. . .

**Suppress counts under 10**

. . .

**Visualise it in a nice table**

. . .

**Can you stratify the result by age group?** (`PatientProfiles::addAge()` allows you to add age_group column to any table).

## Result

```{r, echo=FALSE}
result <- cdm$simvastatin_cohort |>
  PatientProfiles::addAge(ageGroup = list(c(0, 49), c(50, Inf))) |>
  summariseCharacteristics(
    strata = list("age_group"),
    demographics = TRUE,
    ageGroup = list(c(0, 49), c(50, Inf)),
    tableIntersectCount = list(
      "Number conditions on index" = list(tableName = "condition_occurrence", window = c(0, 0))
    ),
    cohortIntersectFlag = list(
      "Conditions any time prior" = list(targetCohortTable = "conditions", window = c(-Inf, 0)),
      "Medications prior year" = list(targetCohortTable = "medications", window = c(-365, 0))
    )
  )
result |>
  suppress(minCellCount = 10) |>
  dplyr::filter(!estimate_name %in% c("min", "max", "mean", "sd")) |>
  tableCharacteristics(
    header = "age_group", 
    groupColumn = "cohort_name",
    hide = c("table", "window", "value", "cdm_name")
  )
```

## Solution

```{r, eval=FALSE}
result <- cdm$simvastatin_cohort |>
  PatientProfiles::addAge(ageGroup = list(c(0, 49), c(50, Inf))) |>
  summariseCharacteristics(
    strata = list("age_group"),
    demographics = TRUE,
    ageGroup = list(c(0, 49), c(50, Inf)),
    tableIntersectCount = list(
      "Number conditions on index" = list(tableName = "condition_occurrence", window = c(0, 0))
    ),
    cohortIntersectFlag = list(
      "Conditions any time prior" = list(targetCohortTable = "conditions", window = c(-Inf, 0)),
      "Medications prior year" = list(targetCohortTable = "medications", window = c(-365, 0))
    )
  )
result |>
  suppress(minCellCount = 10) |>
  dplyr::filter(!estimate_name %in% c("min", "max", "mean", "sd")) |>
  tableCharacteristics(
    header = "age_group", 
    groupColumn = "cohort_name",
    hide = c("table", "window", "value", "cdm_name")
  )
```

## CohortCharacteristics

[![](https://github.com/darwin-eu-dev/CohortCharacteristics/blob/main/man/figures/logo.png?raw=true){fig-align="center" width="5.5in"}](https://darwin-eu-dev.github.io/CohortCharacteristics/)
