---
title: "OMOP and CDMConnector"
subtitle: "The OMOP Common Data Model"
format:
  revealjs: 
    theme: [simple, styleOU.scss]
    incremental: true   
    slide-number: true
    chalkboard: true
    preview-links: auto
    margin: 0.07
    code-link: true
    code-line-numbers: false
    height: 900
    width: 1600
    footer: "Conducting 'Off-The-Shelf' Characterization Studies Using DARWIN EU Tools and the OMOP CDM"
execute:
  echo: true
  eval: true
editor: visual
---

## Standarisation of the data format

![The OMOP Common Data Model](https://ohdsi.github.io/TheBookOfOhdsi/images/CommonDataModel/cdmDiagram.png)

## Connect to eunomia

. . .

Eunomia is a synthetic OMOP database with \~2,600 individuals. It is freely available and you can download it as:

. . .

```{r}
library(DBI)
library(dplyr)
library(duckdb)
library(CDMConnector)
library(here)
# downloadEunomiaData(pathToData = here("eunomia"), overwrite = TRUE)
Sys.setenv("EUNOMIA_DATA_FOLDER" = here("eunomia"))
```

. . .

To connect to this database we are going to use `duckdb`

```{r}
db <- dbConnect(duckdb(), dbdir = eunomiaDir())
db
```

## Creating a reference to the OMOP common data model

We already know what the structure of the OMOP CDM looks like. The `CDMConnector` package was made to help you to quickly create a reference to the OMOP CDM data as a whole.

```{r}
library(CDMConnector)
```

-   To install any of these packages that we use you can type: `install.packages("CDMConnector")` in the console.

## Creating a reference to the OMOP common data model

```{r, message=TRUE}
cdm <- cdmFromCon(con = db, cdmSchema = "main", writeSchema = "main")
cdm
```

## Creating a reference to the OMOP common data model

Once we have created the our reference to the overall OMOP CDM, we can reference specific tables using the "\$" operator or \[\[""\]\].

```{r}
cdm$observation_period |> head(2)
```

<br/>

. . .

```{r}
cdm[["observation_period"]] |> head(2)
```

. . .

## Creating a reference to the OMOP common data model

We can use common dplyr operations to interact with the data in our cdm reference

```{r}
cdm$condition_occurrence |> 
  count()
```

<br/>

. . .

```{r}
cdm$condition_occurrence |> 
  summarise(
    min_condition_start = min(condition_start_date, na.rm = TRUE),
    median_condition_start = median(condition_start_date, na.rm = TRUE),
    max_condition_start = max(condition_start_date, na.rm = TRUE))
```

. . .


## Creating a reference to the OMOP common data model

Behind the scenes our dplyr query is being translated into SQL.

```{r}
cdm$condition_occurrence |> 
  summarise(
    min_condition_start = min(condition_start_date, na.rm = TRUE),
    median_condition_start = median(condition_start_date, na.rm = TRUE),
    max_condition_start = max(condition_start_date, na.rm = TRUE)) |> 
  show_query()
```


## Your turn

Using a cdm reference you have connected to:

1.  How many people are in the person table?

2.  What is the minimum observation period start date?

3.  What is the maximum observation period end date?


## CDM vocabulary tables

```{r}
cdm$concept %>% glimpse()
```

## CDM vocabulary tables

```{r}
cdm$condition_occurrence %>% 
  group_by(condition_concept_id) %>% 
  tally() %>% 
  left_join(cdm$concept %>% 
              select("concept_id", "concept_name"),
            by = c("condition_concept_id" = "concept_id")) %>% 
  collect() %>% 
  arrange(desc(n))
```

## CDM vocabulary tables

```{r}
cdm$concept_ancestor %>% glimpse()
```

## CDM vocabulary tables

```{r}
cdm$concept_relationship %>% glimpse()
```

## CDM vocabulary tables

```{r}
cdm$concept_synonym %>% glimpse()
```

## Vocabulary version

Search results will be specific to the version of the vocabulary being used

```{r}
library(CodelistGenerator)
getVocabVersion(cdm)
```

## Available vocabularies

What vocabularies are available?

```{r}
getVocabularies(cdm = cdm)
```

## Available domains

What domains are present?

```{r}
getDomains(cdm)
```

## Concept classes

What concept classes are present?

```{r}
getConceptClassId(cdm,
                  standardConcept = "Standard",
                  domain = "Drug")
```

. . .

```{r}
getConceptClassId(cdm,
                  standardConcept = "Standard",
                  domain = "Condition")
```

## Your turn

Using a cdm reference you have connected to:

1.  What is the vocabulary version of the cdm?

2.  How many concepts are in your concept table? How many of these are standard concepts?

3.  What domains are available? Which domains would you use if you were defining a cohort of people with asthma?

## Drug ingredients codelist

```{r}
ingredients <- getDrugIngredientCodes(cdm = cdm, nameStyle = "{concept_name}")
ingredients
```

. . .

```{r}
ingredients$warfarin
```

. . .

```{r}
cdm$concept |> 
  filter(concept_id %in% c(1310149, 40163554))
```

## Drug ingredients codelist

```{r}
ingredients <- getDrugIngredientCodes(cdm = cdm, name = "warfarin", nameStyle = "{concept_name}")
```

. . .

```{r}
stratifyByDoseUnit(ingredients, cdm)
```

. . .

```{r}
stratifyByRouteCategory(ingredients, cdm)
```


## Your turn

Using Eunomia data:

1.  Get codes for memantine using `getDrugIngredientCodes`

2.  Stratify your memantine codes by their route

# DrugExposureDiagnostics  

```{r}
library(DrugExposureDiagnostics)

cdm_mock <- mockDrugExposure()
result <- executeChecks(cdm_mock, 
                        ingredients = c(1125315), 
                        checks = c("exposureDuration",
                                   "missing"))

result$missingValuesOverall |> 
  glimpse()


result$drugExposureDurationOverall |> 
  glimpse()

```


