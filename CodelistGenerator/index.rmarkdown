---
title: "CodelistGenerator"
format:
  revealjs: 
    theme: [simple, styleOU.scss]
    incremental: true   
    slide-number: true
    chalkboard: true
    preview-links: auto
    margin: 0.07
    code-link: true
    code-line-numbers: false
    height: 900
    width: 1600
    footer: |
      <div style="position: relative; width: 100%;">
        <div style="text-align: center; font-weight: 500;">Running characterisation studies from beginning to end: a tutorial using DARWIN-EUÂ® standardised analytics</div>
        <div style="position: fixed; top: 20px; left: 20px;"><a href="../index.qmd" style="text-decoration: none;">â¬… Back</a></div>
      </div>
execute:
  echo: true
  eval: true
editor: visual
---

```{r, echo = FALSE}
options(width = 120)
```


# Working with the OMOP CDM from R

## Standarisation of the data format

![The OMOP Common Data Model](https://ohdsi.github.io/TheBookOfOhdsi/images/CommonDataModel/cdmDiagram.png)

## Create a reference to `GiBleed` dataset

. . .

Eunomia is a synthetic OMOP database with \~2,600 individuals. It is freely available and you can create a cdm reference like:

. . .


```{r}
library(DBI)
library(dplyr)
library(duckdb)
library(omopgenerics)
library(CDMConnector)
library(here)
library(CodelistGenerator)
library(CohortConstructor)
```


. . .


```{r, message = TRUE}
con <- dbConnect(duckdb(), 
                 dbdir = eunomiaDir())
cdm <- cdmFromCon(con = con, 
                  cdmSchema = "main", 
                  writeSchema = "main", 
                  cdmName = "Eunomia")
cdm
```


## Creating a reference to the OMOP common data model

Once we have created the our reference to the overall OMOP CDM, we can reference specific tables using the "\$" operator or \[\[""\]\].


```{r}
cdm$observation_period |> head(2)
```


<br/>

. . .


```{r}
cdm[["observation_period"]] |> head(2)
```


. . .

## Behind the scenes

The omopgenerics package defines core classes and methods used by CDMConnector and analytic packages.

. . .

Having omopgenerics as a central dependency reduces code duplication and ensures consistency across packages (eg function inputs, error messages, and results objects).

. . .


```{r}
omopgenerics::validateCdmArgument(cdm = cdm, 
                                  checkOverlapObservation = TRUE, 
                                  checkStartBeforeEndObservation = TRUE, 
                                  checkPlausibleObservationDates = TRUE)
```


## `<cdm_reference>` object


```{r}
class(cdm)
```


. . .


```{r}
cdmName(cdm)
```


. . .


```{r}
cdmVersion(cdm)
```


. . .


```{r, message=TRUE}
cdmSource(cdm)
```


## `<cdm_table>` object

. . .


```{r}
cdm$person
```


. . .


```{r}
class(cdm$person)
```


## `<cdm_table>` object

. . .


```{r, message=TRUE}
cdmReference(cdm$person)
```


. . .


```{r}
tableName(cdm$person)
```


. . .


```{r, message=TRUE}
tableSource(cdm$person)
```


## `<cdm_table>` object


```{r}
cdmName(cdm$person)
```


. . .


```{r}
cdmVersion(cdm$person)
```


. . .


```{r, message=TRUE}
cdmSource(cdm$person)
```


## Working with the cdm reference

We can use common dplyr operations to interact with the data in our cdm reference


```{r}
cdm$condition_occurrence |> 
  count()
```


<br/>

. . .


```{r}
cdm$condition_occurrence |> 
  summarise(
    min_condition_start = min(condition_start_date, na.rm = TRUE),
    median_condition_start = median(condition_start_date, na.rm = TRUE),
    max_condition_start = max(condition_start_date, na.rm = TRUE))
```


## Dplyr R code to SQL

Behind the scenes our dplyr query is being translated into SQL.


```{r}
cdm$condition_occurrence |> 
  count() |> 
  show_query()
```


. . .


```{r}
cdm$condition_occurrence |> 
  summarise(
    min_condition_start = min(condition_start_date, na.rm = TRUE),
    median_condition_start = median(condition_start_date, na.rm = TRUE),
    max_condition_start = max(condition_start_date, na.rm = TRUE)) |> 
  show_query()
```


## Your turn

Using a cdm reference you have connected to:

1.  How many people are in the person table?

2.  What is the minimum observation period start date?

3.  What is the maximum observation period end date?

## Solution

<details>

<summary>ðŸ’¡ Click to see solution</summary>


```{r}
cdm$person |> 
  count()

cdm$observation_period |> 
  summarise(min_obs_period_start = min(observation_period_start_date, na.rm = TRUE)) 

cdm$observation_period |> 
  summarise(max_obs_period_start = max(observation_period_start_date, na.rm = TRUE))
```


</details>

# CDM vocabulary tables

## CDM vocabulary tables

<https://athena.ohdsi.org>

![](images/paste-08513A51.png){width="2000"}

## CDM vocabulary tables


```{r}
cdm$concept |> glimpse()
```


## CDM vocabulary tables


```{r}
cdm$condition_occurrence |>
  group_by(condition_concept_id) |>
  tally() |>
  left_join(
    cdm$concept |>
      select("concept_id", "concept_name"),
    by = c("condition_concept_id" = "concept_id")
  ) |>
  collect() |>
  arrange(desc(n))
```


## CDM vocabulary tables


```{r}
cdm$concept_ancestor |> glimpse()
```


## CDM vocabulary tables


```{r}
cdm$concept_relationship |> glimpse()
```


## CDM vocabulary tables


```{r}
cdm$concept_synonym |> glimpse()
```


# Exploring vocabulary tables using CodelistGenerator

## Vocabulary version

Search results will be specific to the version of the vocabulary being used


```{r}
getVocabVersion(cdm = cdm)
```


## Available vocabularies

What vocabularies are available?


```{r}
getVocabularies(cdm = cdm)
```


## Available domains

What domains are present?


```{r}
getDomains(cdm = cdm)
```


## Concept classes

What concept classes are present?


```{r}
getConceptClassId(
  cdm = cdm,
  standardConcept = "Standard",
  domain = "Drug"
)
```


. . .


```{r}
getConceptClassId(
  cdm = cdm,
  standardConcept = "Standard",
  domain = "Condition"
)
```


## Your turn

Using a cdm reference you have connected to:

1.  What is the vocabulary version of the cdm?

2.  How many concepts are in your concept table?

3.  What domains are available? 

## Solution

<details>

<summary>ðŸ’¡ Click to see solution</summary>


```{r}
getVocabVersion(cdm = cdm)

cdm$concept |>
  tally()

getDomains(cdm = cdm)
```


</details>

# Vocabulary based codelists using CodelistGenerator

## Vocabulary-based codelists using CodelistGenerator

We can use drug hierarchies and relationships to create vocabulary-based codelists.

## Drug ingredients


```{r}
ingredients <- getDrugIngredientCodes(cdm = cdm, 
                                      name = c("warfarin", "morphine", 
                                               "verapamil", "atorvastatin",
                                               "nitroglycerin", "simvastatin",
                                               "acetaminophen"),
                                      nameStyle = "{concept_name}")
ingredients
```


. . .


```{r}
ingredients$warfarin
```


. . .


```{r}
cdm$concept |>
  filter(concept_id %in% c(1310149, 40163554))
```



## Drug ingredients


```{r}
combinations <- getDrugIngredientCodes(cdm = cdm, 
                                      name = c("acetaminophen"),
                                      ingredientRange = c(2, Inf),
                                      nameStyle = "{concept_name}")
combinations
```


. . .


```{r}
combinations$acetaminophen
```


. . .


```{r}
cdm$concept |>
  filter(concept_id %in% c(40229134, 40231925, 40162522, 19133768)) |> 
  pull(concept_name)
```


## Your turn

Using Eunomia data:

1.  Get codes for memantine using `getDrugIngredientCodes`. How many codes do you include?

2.  Get codes for memantine, restricting to only concepts with it as the only ingredient. Do the codes you include change?

## Solution

<details>

<summary>ðŸ’¡ Click to see solution</summary>


```{r}
memantine_codes <- getDrugIngredientCodes(cdm = cdm, name = "memantine")
memantine_codes
```

```{r}
memantine_monotherapy_codes <- getDrugIngredientCodes(cdm = cdm, name = "memantine",
                                                      ingredientRange = c(1, 1))
memantine_monotherapy_codes
```


</details>

# Systematic search using CodelistGenerator

## Systematic search using CodelistGenerator

<br/>

CodelistGenerator is used to create a candidate set of codes for helping to define patient cohorts in data mapped to the OMOP common data model.

<br/>

. . .

A little like the process for a systematic review, the idea is that for a specified search strategy, CodelistGenerator will identify a set of concepts that may be relevant, with these then being screened to remove any irrelevant codes.

## Codes for asthma


```{r}
asthma_codes <- getCandidateCodes(
  cdm = cdm,
  keywords = "asthma",
  domains = "Condition"
)
asthma_codes |> glimpse()
```


<br/>

. . .


```{r}
asthma_cs <- newCodelist(list("asthma" = asthma_codes$concept_id))
asthma_cs
```


## Your turn

Using Eunomia data:

1.  Search for codes for sinusitis recorded in the condition domain

2.  Do you identify any more codes if you also search in the observation domain as well as the condition domain

## Solution

<details>

<summary>ðŸ’¡ Click to see solution</summary>


```{r}
sinusitis_codes <- getCandidateCodes(
  cdm = cdm,
  keywords = "sinusitis",
  domains = "Condition"
)
nrow(sinusitis_codes)

sinusitis_codes_2 <- getCandidateCodes(
  cdm = cdm,
  keywords = "sinusitis",
  domains = c("Condition", "Observation")
)
nrow(sinusitis_codes_2)
```


</details>


# Codelists to cohorts 

## Codelists to cohorts 


```{r}
medication_codes <- getDrugIngredientCodes(cdm = cdm, 
                                      name = c("warfarin", "morphine", 
                                               "verapamil", "atorvastatin",
                                               "nitroglycerin", "simvastatin",
                                               "acetaminophen"),
                                      nameStyle = "{concept_name}")

cdm$meds <- conceptCohort(cdm = cdm, 
                          conceptSet = medication_codes,
                          exit = "event_end_date",
                          name = "meds") |> 
  collapseCohorts(gap = 30) 

cdm$meds 
```



## Codelists to cohorts

```{r}
sinusitis_codes <- getCandidateCodes(
  cdm = cdm,
  keywords = "sinusitis",
  domains = "Condition"
)

cdm$sinusitis <- conceptCohort(cdm = cdm, 
                          conceptSet = list(sinusitis = sinusitis_codes$concept_id),
                          exit = "event_end_date",
                          name = "sinusitis") |> 
  requireIsFirstEntry()

cdm$sinusitis
```


## `<cohort_table>` object

```{r}
settings(cdm$meds)
```

```{r}
settings(cdm$sinusitis)
```


## `<cohort_table>` object


```{r}
cohortCount(cdm$meds)
```

```{r}
cohortCount(cdm$sinusitis)
```


## `<cohort_table>` object

```{r}
attrition(cdm$meds)
```

```{r}
attrition(cdm$sinusitis)
```


## `<cohort_table>` object

```{r}
cohortCodelist(cdm$meds, 1)
```

```{r}
cohortCodelist(cdm$sinusitis, 1)
```


## Your turn

Using Eunomia data:

1.  Create a cohort of people taking aspirin, collapse records less than 30 days, and require is first ever exposure


## Solution

<details>

<summary>ðŸ’¡ Click to see solution</summary>


```{r}
aspirin_codes <- getDrugIngredientCodes(cdm = cdm, name = "aspirin")
cdm$aspirin_cohort <- conceptCohort(cdm = cdm, conceptSet = aspirin_codes, 
                                    name = "aspirin_cohort") |> 
  collapseCohorts(gap = 30) |> 
  requireIsFirstEntry()

cdm$aspirin_cohort |> 
  glimpse()
```


</details>


