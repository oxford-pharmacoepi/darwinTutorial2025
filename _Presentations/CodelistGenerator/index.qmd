---
title: "CodelistGenerator"
subtitle: "Working with the OMOP CDM vocabulary tables"
format:
  revealjs: 
    incremental: true   
    slide-number: true
    chalkboard: true
    preview-links: auto
    margin: 0.07
    code-link: true
    code-line-numbers: false
    height: 900
    width: 1600
    footer: "Conducting 'Off-The-Shelf' Characterisation Studies Using DARWIN EU Tools and the OMOP CDM"
execute:
  echo: true
  eval: true
editor: visual
---

# CodelistGenerator {.title-slide}

```{r, echo=FALSE}
options(width = 130)
```

::: {style="margin-top: 25px;"}
:::

# Reference to the CDM vocabulary tables

## Reference to the CDM vocabulary tables
## Connect to eunomia

```{r}
library(DBI)
library(dplyr)
library(duckdb)
library(omopgenerics)
library(CDMConnector)
library(here)
library(CodelistGenerator)
# downloadEunomiaData(pathToData = here("eunomia"), overwrite = TRUE)
Sys.setenv("EUNOMIA_DATA_FOLDER" = here("eunomia"))
```

. . .

To connect to this database we are going to use `duckdb`

```{r}
db <- dbConnect(duckdb(), dbdir = eunomiaDir())
db
```

```{r, message=TRUE}
cdm <- cdmFromCon(con = db, cdmSchema = "main", writeSchema = "main")
cdm
```

## Reference to the CDM vocabulary tables

Note, Eunomia doesnÂ´t have a full set of vocabularies:

```{r}
cdm$concept %>%
  tally() %>%
  pull()
```

# CDM vocabulary tables

## CDM vocabulary tables

<https://athena.ohdsi.org>

![](images/paste-08513A51.png){width="2000"}

## CDM vocabulary tables

```{r}
cdm$concept %>% glimpse()
```

## CDM vocabulary tables

```{r}
cdm$condition_occurrence %>%
  group_by(condition_concept_id) %>%
  tally() %>%
  left_join(
    cdm$concept %>%
      select("concept_id", "concept_name"),
    by = c("condition_concept_id" = "concept_id")
  ) %>%
  collect() %>%
  arrange(desc(n))
```

## CDM vocabulary tables

```{r}
cdm$concept_ancestor %>% glimpse()
```

## CDM vocabulary tables

```{r}
cdm$concept_relationship %>% glimpse()
```

## CDM vocabulary tables

```{r}
cdm$concept_synonym %>% glimpse()
```

# Exploring vocabulary tables using CodelistGenerator

## Vocabulary version

Search results will be specific to the version of the vocabulary being used

```{r}
getVocabVersion(cdm = cdm)
```

## Available vocabularies

What vocabularies are available?

```{r}
getVocabularies(cdm = cdm)
```

## Available domains

What domains are present?

```{r}
getDomains(cdm = cdm)
```

## Concept classes

What concept classes are present?

```{r}
getConceptClassId(
  cdm = cdm,
  standardConcept = "Standard",
  domain = "Drug"
)
```

. . .

```{r}
getConceptClassId(
  cdm = cdm,
  standardConcept = "Standard",
  domain = "Condition"
)
```

## Your turn

Using a cdm reference you have connected to:

1.  What is the vocabulary version of the cdm?

2.  How many concepts are in your concept table? 

3.  What domains are available? Which domains would you use if you were defining a cohort of people with asthma?

## Solution

<details>

<summary>ðŸ’¡ Click to see solution</summary>

```{r, eval = FALSE}
getVocabVersion(cdm = cdm)

cdm$concept |>
  tally()

getDomains(cdm = cdm)
```

</details>

# Vocabulary based codelists using CodelistGenerator

## Vocabulary-based codelists using CodelistGenerator

We can use drug hierarchies and relationships to create vocabulary-based codelists.

## Drug ingredients

```{r}
ingredients <- getDrugIngredientCodes(cdm = cdm, nameStyle = "{concept_name}")
ingredients
```

. . .

```{r}
ingredients$warfarin
```

. . .

```{r}
cdm$concept |>
  filter(concept_id %in% c(1310149, 40163554))
```

## Your turn

Using Eunomia data:

1.  Get codes for memantine using `getDrugIngredientCodes`. How many codes do you include?

2.  How how many records for memantine are in the drug exposure table (hint: filter on the drug_concept_id field from the drug_exposure table)?

    -   0

    -   67

    -   110

    -   245

## Solution

<details>

<summary>ðŸ’¡ Click to see solution</summary>

```{r, eval = FALSE}
memantine_codes <- getDrugIngredientCodes(cdm = cdm, name = "memantine")
memantine_codes

cdm$drug_exposure |>
  filter(drug_concept_id %in% !!memantine_codes[[1]]) |>
  tally()
```

</details>

# Systematic search using CodelistGenerator

## Systematic search using CodelistGenerator

<br/>

CodelistGenerator is used to create a candidate set of codes for helping to define patient cohorts in data mapped to the OMOP common data model.

<br/>

. . .

A little like the process for a systematic review, the idea is that for a specified search strategy, CodelistGenerator will identify a set of concepts that may be relevant, with these then being screened to remove any irrelevant codes.

## Codes for asthma

```{r}
asthma_codes <- getCandidateCodes(
  cdm = cdm,
  keywords = "asthma",
  domains = "Condition"
)
asthma_codes %>% glimpse()
```

<br/>

. . .

```{r}
asthma_cs <- newCodelist(list("asthma" = asthma_codes$concept_id))
asthma_cs
```

## Your turn

Using Eunomia data:

1.  Search for codes for sinusitis recorded in the condition domain

2.  Do you identify any more codes if you also search in the observation domain as well as the condition domain

## Solution

<details>

<summary>ðŸ’¡ Click to see solution</summary>

```{r, eval = FALSE}
sinusitis_codes <- getCandidateCodes(
  cdm = cdm,
  keywords = "sinusitis",
  domains = "Condition"
)
nrow(sinusitis_codes)

sinusitis_codes_2 <- getCandidateCodes(
  cdm = cdm,
  keywords = "sinusitis",
  domains = c("Condition", "Observation")
)
nrow(sinusitis_codes_2)
```

</details>


